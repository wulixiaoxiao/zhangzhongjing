# 中医智能问诊系统 - Nginx 配置
# 
# 使用说明：
# 1. 将此配置复制到 nginx 站点配置文件中
# 2. 修改 server_name 为你的域名
# 3. 修改 root 路径为项目的 public 目录
# 4. 如果使用 HTTPS，请配置 SSL 证书

server {
    listen 80;
    listen [::]:80;
    
    # 服务器域名（修改为你的域名）
    server_name yisheng.example.com;
    
    # 网站根目录（指向 public 目录）
    root /var/www/yisheng/public;
    
    # 默认文件
    index index.php index.html;
    
    # 字符集
    charset utf-8;
    
    # 日志文件
    access_log /var/log/nginx/yisheng_access.log;
    error_log /var/log/nginx/yisheng_error.log;
    
    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
    }
    
    # 禁止访问备份文件
    location ~ \.(sql|bak|old|log|sh|git|svn|env)$ {
        deny all;
    }
    
    # 静态文件缓存
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|doc|docx)$ {
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
    
    # 主要的伪静态规则
    location / {
        # 尝试直接访问文件，如果不存在则重写到 index.php
        try_files $uri $uri/ /index.php?url=$uri&$args;
    }
    
    # PHP 处理
    location ~ \.php$ {
        # 检查文件是否存在
        try_files $uri =404;
        
        # FastCGI 配置
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;  # 根据你的 PHP 版本调整
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        
        # PHP 超时设置（用于 AI 处理）
        fastcgi_read_timeout 300;
        fastcgi_send_timeout 300;
    }
    
    # 特定路由的重写规则
    location ~ ^/(consultation|history|api)(/.*)?$ {
        try_files $uri $uri/ /index.php?url=$1$2&$args;
    }
    
    # 安全响应头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Feature-Policy "camera 'none'; microphone 'none'; geolocation 'self';" always;
    
    # 内容安全策略
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; img-src 'self' data: https:; font-src 'self' https://cdn.jsdelivr.net;" always;
    
    # 文件上传大小限制
    client_max_body_size 10M;
    
    # 防止缓冲区溢出
    client_body_buffer_size 1K;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;
    
    # 禁用不必要的 HTTP 方法
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 405;
    }
    
    # 限制请求速率（防止暴力攻击）
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=60r/m;
    
    # 登录接口限速
    location = /index.php {
        if ($arg_url = "user/login") {
            limit_req zone=login burst=5 nodelay;
        }
        
        # API 接口限速
        if ($arg_url ~ "^api/") {
            limit_req zone=api burst=10 nodelay;
        }
        
        # PHP 处理
        try_files $uri =404;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_read_timeout 300;
    }
    
    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml;
    
    # 隐藏 nginx 版本
    server_tokens off;
}

# HTTPS 配置示例（需要 SSL 证书）
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     
#     server_name yisheng.example.com;
#     root /var/www/yisheng/public;
#     
#     # SSL 证书配置
#     ssl_certificate /etc/nginx/ssl/yisheng.crt;
#     ssl_certificate_key /etc/nginx/ssl/yisheng.key;
#     
#     # SSL 安全配置
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
#     ssl_prefer_server_ciphers on;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HSTS（强制 HTTPS）
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # 其他配置与 HTTP 相同...
# }
# 
# # HTTP 重定向到 HTTPS
# server {
#     listen 80;
#     listen [::]:80;
#     server_name yisheng.example.com;
#     return 301 https://$server_name$request_uri;
# } 